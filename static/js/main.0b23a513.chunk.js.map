{"version":3,"sources":["polyfill.js","drizzleOptions.js","localstorage.js","reducers/todos.js","reducers/contractMetadataReducer.js","store.js","middleware/index.js","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","options","web3","block","fallback","type","url","contracts","events","polls","accounts","loadLocalStorage","key","serializedState","localStorage","getItem","JSON","parse","err","console","log","saveLocalStorage","data","stringify","setItem","fetchTodos","appRootSaga","TODOS_FETCH","TODOS_RECEIVED","fetch","then","response","json","todos","put","takeEvery","initialState","contractMetadataReducer","state","action","contractName","contractMetadata","rest","persistedState","persistedContracts","drizzleOptions","config","appReducers","appSagas","appMiddlewares","store","next","EventActions","EVENT_FIRED","contract","name","contractEvent","contractMessage","returnValues","_message","display","disableReduxDevTools","generateStore","dispatch","drizzle","Drizzle","subscribe","getState","handler","set","target","property","value","receiver","saveTarget","Object","entries","map","address","abi","networks","links","contractsProxy","Proxy","DefaultLayout","React","lazy","App","Provider","Suspense","className","path","render","props","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b23a513.chunk.js","sourcesContent":["/*\n * required polyfills\n */\nimport \"core-js\"\nimport \"core-js/features/set/map\"\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. * */\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. * */\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n;\n\n(function() {\n  if (typeof window.CustomEvent === \"function\") return false\n\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    const evt = document.createEvent(\"CustomEvent\")\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail)\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import ERC20Token from \"./contracts/ERC20Token.json\"\nimport CrowdsaleSimple from \"./contracts/CrowdsaleSimple.json\"\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:7545\"\n    }\n  },\n  contracts: [], // [ERC20Token, CrowdsaleSimple],\n  events: {\n    // ERC20Token: [\"Transfer\", \"Approval\"]\n  },\n  polls: {\n    accounts: 1500\n  }\n}\n\nexport default options\n","export const loadLocalStorage = key => {\n  try {\n    const serializedState = localStorage.getItem(key)\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.log(err)\n    return undefined\n  }\n}\n\nexport const saveLocalStorage = (data, key) => {\n  try {\n    const serializedState = JSON.stringify(data)\n    localStorage.setItem(key, serializedState)\n  } catch (err) {\n    console.log(err)\n  }\n}\n","import { put, takeEvery } from \"redux-saga/effects\"\n\n// actions\nconst TODOS_FETCH = \"MY_APP/TODOS_FETCH\"\nconst TODOS_RECEIVED = \"MY_APP/TODOS_RECEIVED\"\n\n// reducers\nexport const todosReducer = (state = [], action) => {\n  if (action.type === TODOS_RECEIVED) {\n    // update your state\n    return action.todos\n  }\n  return state\n}\n\n// fetch data from service using sagas\nexport function* fetchTodos() {\n  const todos = yield fetch(\"https://jsonplaceholder.typicode.com/todos\").then(\n    response => response.json()\n  )\n  yield put({ type: TODOS_RECEIVED, todos })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* appRootSaga() {\n  yield takeEvery(TODOS_FETCH, fetchTodos)\n}\n","// actions\nconst ADD_CONTRACT_METADATA = \"ADD_CONTRACT_METADATA\"\nconst DELETE_CONTRACT_METADATA = \"DELETE_CONTRACT_METADATA\"\nconst SET_CONTRACT_METADATA = \"SET_CONTRACT_METADATA\"\n\nconst initialState = {}\n\n// reducers\nexport const contractMetadataReducer = (state = initialState, action) => {\n  if (action.type === ADD_CONTRACT_METADATA) {\n    return {\n      ...state,\n      [action.contractName]: action.contractMetadata\n    }\n  }\n\n  if (action.type === DELETE_CONTRACT_METADATA) {\n    const { [action.contractName]: omitted, ...rest } = state\n    return rest\n  }\n\n  if (action.type === SET_CONTRACT_METADATA) {\n    return action.contractMetadata\n  }\n\n  return state\n}\n\nexport default contractMetadataReducer\n","import { Drizzle, generateStore } from \"@drizzle/store\"\nimport drizzleOptions from \"./drizzleOptions\"\nimport { loadLocalStorage, saveLocalStorage } from \"./localstorage\"\nimport { contractEventNotifier, contractAddNotifier } from \"./middleware\"\nimport onChange from \"./onchange\"\n\nimport { todosReducer, appRootSaga } from \"./reducers/todos.js\"\nimport contractMetadataReducer from \"./reducers/contractMetadataReducer\"\n\n// Load saved Web3 contracts\nconst persistedState = loadLocalStorage(\"state\")\nconst persistedContracts = loadLocalStorage(\"contracts\")\nif (persistedContracts) {\n  drizzleOptions.contracts = persistedContracts.contracts\n}\nconsole.log(drizzleOptions.contracts)\n\nconst appReducers = {\n  todos: todosReducer,\n  contractMetadata: contractMetadataReducer\n}\nconst appSagas = [appRootSaga]\nconst appMiddlewares = [contractEventNotifier, contractAddNotifier]\n\nconst config = {\n  drizzleOptions,\n  appReducers,\n  appSagas,\n  appMiddlewares,\n  disableReduxDevTools: false // enable ReduxDevTools!\n}\nconst store = generateStore(config)\nif (persistedState) {\n  if (persistedState.contractMetadata) {\n    store.dispatch({\n      type: \"SET_CONTRACT_METADATA\",\n      contractMetadata: persistedState.contractMetadata\n    })\n  }\n}\nconst drizzle = new Drizzle(drizzleOptions, store)\n\nstore.subscribe(() => {\n  saveLocalStorage(\n    {\n      todos: store.getState().todos,\n      contractMetadata: store.getState().contractMetadata\n    },\n    \"state\"\n  )\n})\n\n// Save Web3 contracts\nconst handler = {\n  set(target, property, value, receiver) {\n    target[property] = value\n    console.log(target)\n    // you have to return true to accept the changes\n    const saveTarget = Object.entries(target).map(([key, value]) => {\n      const { address, contractName, abi } = value\n      const networks = {\n        \"5777\": {\n          events: {},\n          links: {},\n          address\n        }\n      }\n      return { address, contractName, abi, networks }\n    })\n    saveLocalStorage(\n      {\n        contracts: saveTarget\n      },\n      \"contracts\"\n    )\n\n    return true\n  }\n}\nconst contractsProxy = new Proxy(drizzle.contracts, handler)\ndrizzle.contracts = contractsProxy\n\nexport default drizzle\n","import { EventActions } from \"@drizzle/store\"\n\nexport const contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const contractMessage = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${contractMessage}`\n\n    // interact with your service\n    console.log(\"Contract event fired\", display)\n  }\n  return next(action)\n}\n\nexport const contractAddNotifier = store => next => action => {\n  if (action.type === \"CONTRACT_INITIALIZED\") {\n    // interact with your service\n    console.log(\"Contract initialized fired\", action)\n  } else if (action.type === \"CONTRACT_INITIALIZING\") {\n    // interact with your service\n    console.log(\"Contract initializing fired\", action)\n  } else {\n    console.log(action.type)\n  }\n  return next(action)\n}\n","import React, { Component } from \"react\"\nimport { HashRouter, Route, Switch } from \"react-router-dom\"\n\nimport { Drizzle } from \"@drizzle/store\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\n\nimport \"./App.scss\"\n\nimport drizzle from \"./store\"\n// import MyContainer from \"./MyContainer\";\n// import TokenFactory from \"./TokenFactory\"\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"))\n\nclass App extends Component {\n  render() {\n    return (\n      <DrizzleContext.Provider drizzle={drizzle}>\n        <HashRouter>\n          <React.Suspense fallback={loading()}>\n            <Switch>\n              <Route\n                path=\"/\"\n                name=\"Home\"\n                render={props => <DefaultLayout {...props} />}\n              />\n            </Switch>\n          </React.Suspense>\n        </HashRouter>\n      </DrizzleContext.Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\" // For IE 9-11 support\nimport \"react-app-polyfill/stable\"\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport \"./polyfill\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
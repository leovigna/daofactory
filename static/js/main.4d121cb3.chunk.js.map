{"version":3,"sources":["drizzleOptions.js","localstorage.js","reducers/todos.js","reducers/contractMetadataReducer.js","store.js","middleware/index.js","components/ERC20/ERC20Deploy/index.js","components/ERC20/ERC20Display/index.js","components/Crowdsale/CrowdsaleDeploy/index.js","components/Crowdsale/CrowdsaleDisplay/index.js","TokenFactory/index.js","App.js","serviceWorker.js","index.js"],"names":["options","web3","block","fallback","type","url","contracts","events","polls","accounts","loadLocalStorage","key","serializedState","localStorage","getItem","JSON","parse","err","console","log","saveLocalStorage","data","stringify","setItem","fetchTodos","appRootSaga","TODOS_FETCH","TODOS_RECEIVED","fetch","then","response","json","todos","put","takeEvery","initialState","contractMetadataReducer","state","action","contractName","contractMetadata","rest","persistedState","persistedContracts","drizzleOptions","config","appReducers","appSagas","appMiddlewares","store","next","EventActions","EVENT_FIRED","contract","name","contractEvent","event","contractMessage","returnValues","_message","display","disableReduxDevTools","generateStore","dispatch","drizzle","Drizzle","subscribe","getState","handler","set","target","property","value","receiver","saveTarget","Object","entries","map","address","abi","networks","links","contractsProxy","Proxy","ERC20Deploy","handleDeployContract","useState","tokenName","setTokenName","tokenSymbol","setTokenSymbol","tokenSupply","setTokenSupply","Row","Form","onSubmit","preventDefault","FormGroup","Label","for","Input","onChange","e","id","placeholder","Button","ContractData","newContextComponents","ContractForm","ERC20Display","setMessage","setErrorMessage","drizzleContext","useContext","DrizzleContext","Context","drizzleState","metadata","contractInterface","web3Contract","watchToken","a","provider","currentProvider","tokenAddress","methods","symbol","call","decimals","tokenDecimals","params","image","sendAsync","method","Math","round","random","added","methodArgs","onClick","CrowdsaleDeploy","setTokenAddress","tokenPrice","setTokenPrice","crowdSaleWallet","CrowdsaleDisplay","crowdsaleWalletKey","setCrowdsaleWalletKey","crowdsaleTokenKey","setCrowdsaleTokenKey","crowdsaleRateKey","setCrowdsaleRateKey","wallet","cacheCall","token","rate","crowdsaleWallet","crowdsaleToken","crowdsaleRate","TokenFactory","currentContract","setCurrentContract","dropdownOpen","setDropdownOpen","emptyContract","unknownContract","erc20Deploy","eth","Contract","ERC20Token","deploy","bytecode","arguments","parseInt","send","from","selectedAddress","gas","gasPrice","error","transactionHash","on","receipt","contractAddress","confirmationNumber","newContractInstance","newAddress","contractConfig","addContract","erc20Display","crowdsaleDeploy","CrowdsaleSimple","crowdsaleDisplay","initialized","contractDisplay","displayed","currentContractMetadata","Container","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","App","Provider","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d121cb3.chunk.js","sourcesContent":["import ERC20Token from \"./contracts/ERC20Token.json\"\nimport CrowdsaleSimple from \"./contracts/CrowdsaleSimple.json\"\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:7545\"\n    }\n  },\n  contracts: [],//[ERC20Token, CrowdsaleSimple],\n  events: {\n    //ERC20Token: [\"Transfer\", \"Approval\"]\n  },\n  polls: {\n    accounts: 1500\n  }\n}\n\nexport default options\n","export const loadLocalStorage = key => {\n  try {\n    const serializedState = localStorage.getItem(key)\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.log(err)\n    return undefined\n  }\n}\n\nexport const saveLocalStorage = (data, key) => {\n  try {\n    const serializedState = JSON.stringify(data)\n    localStorage.setItem(key, serializedState)\n  } catch (err) {\n    console.log(err)\n  }\n}\n","import { put, takeEvery } from \"redux-saga/effects\"\n\n// actions\nconst TODOS_FETCH = \"MY_APP/TODOS_FETCH\"\nconst TODOS_RECEIVED = \"MY_APP/TODOS_RECEIVED\"\n\n// reducers\nexport const todosReducer = (state = [], action) => {\n  if (action.type === TODOS_RECEIVED) {\n    // update your state\n    return action.todos\n  }\n  return state\n}\n\n// fetch data from service using sagas\nexport function* fetchTodos() {\n  const todos = yield fetch(\"https://jsonplaceholder.typicode.com/todos\").then(\n    response => response.json()\n  )\n  yield put({ type: TODOS_RECEIVED, todos })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* appRootSaga() {\n  yield takeEvery(TODOS_FETCH, fetchTodos)\n}\n","// actions\nconst ADD_CONTRACT_METADATA = \"ADD_CONTRACT_METADATA\"\nconst DELETE_CONTRACT_METADATA = \"DELETE_CONTRACT_METADATA\"\nconst SET_CONTRACT_METADATA = \"SET_CONTRACT_METADATA\"\n\nconst initialState = {}\n\n// reducers\nexport const contractMetadataReducer = (state = initialState, action) => {\n  if (action.type === ADD_CONTRACT_METADATA) {\n    return {\n      ...state,\n      [action.contractName]: action.contractMetadata\n    }\n  }\n\n  if (action.type === DELETE_CONTRACT_METADATA) {\n    const { [action.contractName]: omitted, ...rest } = state\n    return rest\n  }\n\n  if (action.type === SET_CONTRACT_METADATA) {\n    return action.contractMetadata\n  }\n\n  return state\n}\n\nexport default contractMetadataReducer\n","import { Drizzle, generateStore } from \"@drizzle/store\"\nimport drizzleOptions from \"./drizzleOptions\"\nimport { loadLocalStorage, saveLocalStorage } from \"./localstorage\"\nimport { contractEventNotifier, contractAddNotifier } from \"./middleware\"\nimport onChange from \"./onchange\"\n\nimport { todosReducer, appRootSaga } from \"./reducers/todos.js\"\nimport contractMetadataReducer from \"./reducers/contractMetadataReducer\"\n\n// Load saved Web3 contracts\nconst persistedState = loadLocalStorage(\"state\")\nconst persistedContracts = loadLocalStorage(\"contracts\")\nif (persistedContracts) {\n  drizzleOptions.contracts = persistedContracts.contracts\n}\nconsole.log(drizzleOptions.contracts)\n\nconst appReducers = {\n  todos: todosReducer,\n  contractMetadata: contractMetadataReducer\n}\nconst appSagas = [appRootSaga]\nconst appMiddlewares = [contractEventNotifier, contractAddNotifier]\n\nconst config = {\n  drizzleOptions,\n  appReducers,\n  appSagas,\n  appMiddlewares,\n  disableReduxDevTools: false // enable ReduxDevTools!\n}\nconst store = generateStore(config)\nif (persistedState) {\n  if (persistedState.contractMetadata) {\n    store.dispatch({\n      type: \"SET_CONTRACT_METADATA\",\n      contractMetadata: persistedState.contractMetadata\n    })\n  }\n}\nconst drizzle = new Drizzle(drizzleOptions, store)\n\nstore.subscribe(() => {\n  saveLocalStorage(\n    {\n      todos: store.getState().todos,\n      contractMetadata: store.getState().contractMetadata\n    },\n    \"state\"\n  )\n})\n\n// Save Web3 contracts\nconst handler = {\n  set(target, property, value, receiver) {\n    target[property] = value\n    console.log(target)\n    // you have to return true to accept the changes\n    const saveTarget = Object.entries(target).map(([key, value]) => {\n      const { address, contractName, abi } = value\n      const networks = {\n        \"5777\": {\n          events: {},\n          links: {},\n          address\n        }\n      }\n      return { address, contractName, abi, networks }\n    })\n    saveLocalStorage(\n      {\n        contracts: saveTarget\n      },\n      \"contracts\"\n    )\n\n    return true\n  }\n}\nconst contractsProxy = new Proxy(drizzle.contracts, handler)\ndrizzle.contracts = contractsProxy\n\nexport default drizzle\n","import { EventActions } from \"@drizzle/store\"\n\nexport const contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const contractMessage = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${contractMessage}`\n\n    // interact with your service\n    console.log(\"Contract event fired\", display)\n  }\n  return next(action)\n}\n\nexport const contractAddNotifier = store => next => action => {\n  if (action.type === \"CONTRACT_INITIALIZED\") {\n    // interact with your service\n    console.log(\"Contract initialized fired\", action)\n  } else if (action.type === \"CONTRACT_INITIALIZING\") {\n    // interact with your service\n    console.log(\"Contract initializing fired\", action)\n  } else {\n    console.log(action.type)\n  }\n  return next(action)\n}\n","import React, { useState } from \"react\"\n\nimport {\n  Row,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from \"reactstrap\"\n\nconst ERC20Deploy = ({ handleDeployContract }) => {\n  const [tokenName, setTokenName] = useState()\n  const [tokenSymbol, setTokenSymbol] = useState()\n  const [tokenSupply, setTokenSupply] = useState()\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    handleDeployContract({ tokenName, tokenSymbol, tokenSupply })\n  }\n  const handleChangeTokenName = e => {\n    setTokenName(e.target.value)\n  }\n  const handleChangeTokenSymbol = e => {\n    setTokenSymbol(e.target.value)\n  }\n  const handleChangeTokenSupply = e => {\n    setTokenSupply(e.target.value)\n  }\n\n  return (\n    <Row>\n      <Form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label for=\"tokenName\">Token Name</Label>\n          <Input\n            type=\"text\"\n            value={tokenName}\n            onChange={handleChangeTokenName}\n            name=\"tokenName\"\n            id=\"tokenName\"\n            placeholder=\"Enter Token Name (eg. Ethereum)\"\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"tokenSymbol\">Token Symbol</Label>\n          <Input\n            type=\"text\"\n            value={tokenSymbol}\n            onChange={handleChangeTokenSymbol}\n            name=\"tokenSymbol\"\n            id=\"tokenSymbol\"\n            placeholder=\"Enter Token Symbol (eg. ETH)\"\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"tokenSupply\">Initial Supply</Label>\n          <Input\n            type=\"number\"\n            value={tokenSupply}\n            onChange={handleChangeTokenSupply}\n            name=\"tokenSupply\"\n            id=\"tokenSupply\"\n            placeholder=\"Enter Initial Supply (eg. 1000)\"\n          />\n        </FormGroup>\n        <Button>Launch</Button>\n      </Form>\n    </Row>\n  )\n}\n\nexport default ERC20Deploy\n","import React, { useState, useContext } from \"react\"\n\nimport { Row, Button } from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\n\nconst { ContractData, ContractForm } = newContextComponents\n\nconst ERC20Display = ({ contract }) => {\n  const [message, setMessage] = useState()\n  const [errorMessage, setErrorMessage] = useState()\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return\n  }\n\n  const { accounts, contracts, contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface != \"ERC20\") {\n      return\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return\n  }\n\n  const watchToken = async e => {\n    const provider = drizzle.web3.currentProvider\n    const tokenAddress = web3Contract.address\n    const tokenSymbol = await web3Contract.methods.symbol().call()\n    const tokenDecimals = await web3Contract.methods.decimals().call()\n\n    // const tokenImage = null;\n    const params = JSON.parse(\n      JSON.stringify({\n        type: \"ERC20\",\n        options: {\n          address: tokenAddress,\n          symbol: tokenSymbol,\n          decimals: tokenDecimals,\n          image:\n            \"https://cdn.pixabay.com/photo/2018/02/02/13/51/bitcoin-3125488_1280.png\"\n        }\n      })\n    )\n    console.log(params)\n\n    provider.sendAsync(\n      {\n        method: \"metamask_watchAsset\",\n        params,\n        id: Math.round(Math.random() * 100000)\n      },\n      (err, added) => {\n        console.log(\"provider returned\", err, added)\n        if (err || \"error\" in added) {\n          setErrorMessage(\"There was a problem adding the token.\")\n          setMessage(\"\")\n          return\n        }\n        setErrorMessage(\"\")\n        setMessage(\"Token added!\")\n      }\n    )\n  }\n\n  return (\n    <Row>\n      <h1>{web3Contract.address}</h1>\n      <p>\n        <strong>Total Supply: </strong>\n        <ContractData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          contract={contract}\n          method=\"totalSupply\"\n        />{\" \"}\n        <ContractData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          contract={contract}\n          method=\"symbol\"\n        />\n      </p>\n      <p>\n        <strong>My Balance: </strong>\n        <ContractData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          contract={contract}\n          method=\"balanceOf\"\n          methodArgs={[accounts[0]]}\n        />\n      </p>\n      <h3>Send Tokens</h3>\n      <ContractForm\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        contract={contract}\n        method=\"transfer\"\n      />\n      <Button onClick={watchToken}>Watch in Wallet</Button>\n    </Row>\n  )\n}\n\nexport default ERC20Display\n","import React, { useState } from \"react\"\n\nimport {\n  Row,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from \"reactstrap\"\n\nconst CrowdsaleDeploy = ({ handleDeployContract }) => {\n  const [tokenAddress, setTokenAddress] = useState()\n  const [tokenPrice, setTokenPrice] = useState()\n  const [tokenSupply, setTokenSupply] = useState()\n  const [crowdSaleWallet, setCrowdSaleWallet] = useState()\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    handleDeployContract({\n      tokenAddress,\n      tokenPrice,\n      tokenSupply,\n      crowdSaleWallet\n    })\n  }\n  const handleChangeTokenAddress = e => {\n    setTokenAddress(e.target.value)\n  }\n  const handleChangeTokenPrice = e => {\n    setTokenPrice(e.target.value)\n  }\n  const handleChangeTokenSupply = e => {\n    setTokenSupply(e.target.value)\n  }\n  const handleChangeCrowdSaleWallet = e => {\n    setCrowdSaleWallet(e.target.value)\n  }\n\n  return (\n    <Row>\n      <Form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label for=\"tokenAddress\">Token Address</Label>\n          <Input\n            type=\"text\"\n            value={tokenAddress}\n            onChange={handleChangeTokenAddress}\n            name=\"tokenAddress\"\n            id=\"tokenAddress\"\n            placeholder=\"Enter Token Address\"\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"tokenPrice\">Token Price</Label>\n          <Input\n            type=\"number\"\n            value={tokenPrice}\n            onChange={handleChangeTokenPrice}\n            name=\"tokenPrice\"\n            id=\"tokenPrice\"\n            placeholder=\"Enter Token Sale Price\"\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"tokenSupply\">Sale Supply</Label>\n          <Input\n            type=\"number\"\n            value={tokenSupply}\n            onChange={handleChangeTokenSupply}\n            name=\"tokenSupply\"\n            id=\"tokenSupply\"\n            placeholder=\"Enter Sale Supply (eg. 1000)\"\n          />\n        </FormGroup>\n        <Button>Launch</Button>\n      </Form>\n    </Row>\n  )\n}\n\nexport default CrowdsaleDeploy\n","import React, { useState, useContext } from \"react\"\n\nimport { Row, Button } from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\n\nconst { ContractData, ContractForm } = newContextComponents\n\nconst CrowdsaleDisplay = ({ contract }) => {\n  const [message, setMessage] = useState()\n  const [errorMessage, setErrorMessage] = useState()\n  const [crowdsaleWalletKey, setCrowdsaleWalletKey] = useState()\n  const [crowdsaleTokenKey, setCrowdsaleTokenKey] = useState()\n  const [crowdsaleRateKey, setCrowdsaleRateKey] = useState()\n\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return\n  }\n\n  const { accounts, contracts, contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface != \"Crowdsale\") {\n      return\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return\n  }\n\n  if (!crowdsaleWalletKey) {\n    setCrowdsaleWalletKey(\n      drizzle.contracts[contract].methods.wallet.cacheCall()\n    )\n  }\n  if (!crowdsaleTokenKey) {\n    setCrowdsaleTokenKey(drizzle.contracts[contract].methods.token.cacheCall())\n  }\n  if (!crowdsaleRateKey) {\n    setCrowdsaleRateKey(drizzle.contracts[contract].methods.rate.cacheCall())\n  }\n\n  const crowdsaleWallet =\n    drizzleState.contracts[contract].wallet[crowdsaleWalletKey]\n  const crowdsaleToken =\n    drizzleState.contracts[contract].token[crowdsaleTokenKey]\n  const crowdsaleRate = drizzleState.contracts[contract].rate[crowdsaleRateKey]\n\n  if (!crowdsaleWallet || !crowdsaleToken || !crowdsaleRate) {\n    return\n  }\n\n  return (\n    <Row>\n      <h1>{web3Contract.address}</h1>\n      <p>\n        <strong>Price: {crowdsaleRate.value}</strong>\n        <strong>Wallet: {crowdsaleWallet.value}</strong>\n        <strong>Token: {crowdsaleToken.value}</strong>\n        <strong>Sale Balance: </strong>\n        <ContractData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          contract={crowdsaleToken.value}\n          method=\"balanceOf\"\n          methodArgs={[crowdsaleWallet.value]}\n        />\n      </p>\n    </Row>\n  )\n}\n\nexport default CrowdsaleDisplay\n","import React, { useState, useContext } from \"react\"\n\nimport {\n  Container,\n  Row,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\n\nimport ERC20Token from \"../contracts/ERC20Token.json\"\nimport CrowdsaleSimple from \"../contracts/CrowdsaleSimple.json\"\n\nimport ERC20Deploy from \"../components/ERC20/ERC20Deploy\"\nimport ERC20Display from \"../components/ERC20/ERC20Display\"\nimport CrowdsaleDeploy from \"../components/Crowdsale/CrowdsaleDeploy\"\nimport CrowdsaleDisplay from \"../components/Crowdsale/CrowdsaleDisplay\"\n\nconst TokenFactory = () => {\n  const [currentContract, setCurrentContract] = useState()\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n\n  const toggleCurrentContractDropdown = e => {\n    if (e.target.value) {\n      setCurrentContract(e.target.value)\n    }\n    console.log(currentContract)\n    setDropdownOpen(prevState => !prevState)\n  }\n\n  const handleDeployCrowdsale = ({ tokenAddress, tokenPrice, tokenSupply }) => {\n    const { web3 } = drizzle\n    // Deploy using web3\n    const web3Contract = new web3.eth.Contract(CrowdsaleSimple.abi)\n    web3Contract\n      .deploy({\n        data: CrowdsaleSimple.bytecode,\n        arguments: [\n          tokenPrice,\n          web3.currentProvider.selectedAddress,\n          tokenAddress\n        ]\n      })\n      .send(\n        {\n          from: web3.currentProvider.selectedAddress,\n          gas: 1500000,\n          gasPrice: web3.eth.gasPrice\n        },\n        function(error, transactionHash) {\n          console.log(transactionHash)\n        }\n      )\n      .on(\"error\", function(error) {\n        console.log(error)\n      })\n      .on(\"transactionHash\", function(transactionHash) {\n        console.log(transactionHash)\n      })\n      .on(\"receipt\", function(receipt) {\n        console.log(receipt.contractAddress) // contains the new contract address\n      })\n      .on(\"confirmation\", function(confirmationNumber, receipt) {\n        console.log(confirmationNumber)\n      })\n      .then(function(newContractInstance) {\n        const newAddress = newContractInstance.options.address\n        console.log(newAddress) // instance with the new contract address\n\n        // Add to drizzle datastore\n        const contractConfig = {\n          contractName: newAddress,\n          web3Contract: newContractInstance\n        }\n        const events = [\"TokensPurchased\"]\n        drizzle.addContract(contractConfig, events)\n\n        drizzle.store.dispatch({\n          type: \"ADD_CONTRACT_METADATA\",\n          contractName: newAddress,\n          contractMetadata: { contractInterface: \"Crowdsale\" }\n        })\n\n        setCurrentContract(newAddress)\n      })\n  }\n\n  const handleDeployERC20 = ({ tokenName, tokenSymbol, tokenSupply }) => {\n    const { web3 } = drizzle\n    // Deploy using web3\n    const web3Contract = new web3.eth.Contract(ERC20Token.abi)\n    web3Contract\n      .deploy({\n        data: ERC20Token.bytecode,\n        arguments: [tokenName, tokenSymbol, 18, parseInt(tokenSupply)]\n      })\n      .send(\n        {\n          from: web3.currentProvider.selectedAddress,\n          gas: 1500000,\n          gasPrice: web3.eth.gasPrice\n        },\n        function(error, transactionHash) {\n          console.log(transactionHash)\n        }\n      )\n      .on(\"error\", function(error) {\n        console.log(error)\n      })\n      .on(\"transactionHash\", function(transactionHash) {\n        console.log(transactionHash)\n      })\n      .on(\"receipt\", function(receipt) {\n        console.log(receipt.contractAddress) // contains the new contract address\n      })\n      .on(\"confirmation\", function(confirmationNumber, receipt) {\n        console.log(confirmationNumber)\n      })\n      .then(function(newContractInstance) {\n        const newAddress = newContractInstance.options.address\n        console.log(newAddress) // instance with the new contract address\n\n        // Add to drizzle datastore\n        const contractConfig = {\n          contractName: newAddress,\n          web3Contract: newContractInstance\n        }\n        const events = [\"Transfer\", \"Approval\"]\n        drizzle.addContract(contractConfig, events)\n\n        drizzle.store.dispatch({\n          type: \"ADD_CONTRACT_METADATA\",\n          contractName: newAddress,\n          contractMetadata: { contractInterface: \"ERC20\" }\n        })\n\n        setCurrentContract(newAddress)\n      })\n  }\n\n  const emptyContract = <h1>Please select a contract.</h1>\n  const unknownContract = <h1>Unknown contract.</h1>\n  const erc20Deploy = ERC20Deploy({ handleDeployContract: handleDeployERC20 })\n  const erc20Display = ERC20Display({ contract: currentContract })\n  const crowdsaleDeploy = CrowdsaleDeploy({\n    handleDeployContract: handleDeployCrowdsale\n  })\n  const crowdsaleDisplay = CrowdsaleDisplay({ contract: currentContract })\n\n  const drizzleContext = useContext(DrizzleContext.Context)\n  const { drizzle, drizzleState, initialized } = drizzleContext\n  if (!initialized) {\n    return \"Loading...\"\n  }\n  if (!drizzleState) {\n    return \"Invalid state...\"\n  }\n  const { contracts, contractMetadata } = drizzleState\n  console.log(drizzleState)\n\n  let contractDisplay\n  const currentContractMetadata = contractMetadata[currentContract]\n  if (currentContractMetadata) {\n    const { contractInterface } = currentContractMetadata\n    console.log(contractInterface)\n    switch (contractInterface) {\n      case \"ERC20\":\n        contractDisplay = erc20Display\n        break\n      case \"Crowdsale\":\n        contractDisplay = crowdsaleDisplay\n        break\n      default:\n        contractDisplay = unknownContract\n        break\n    }\n  } else {\n    console.log(currentContractMetadata)\n    contractDisplay = unknownContract\n  }\n\n  let displayed\n  if (!currentContract) {\n    displayed = emptyContract\n  } else if (currentContract === \"add\") {\n    displayed = erc20Deploy\n  } else if (currentContract === \"add2\") {\n    displayed = crowdsaleDeploy\n  } else {\n    // Select ERC20 | Crowdsale\n    displayed = contractDisplay\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Dropdown isOpen={dropdownOpen} toggle={toggleCurrentContractDropdown}>\n          <DropdownToggle caret>\n            {currentContract || \"Select contract\"}\n          </DropdownToggle>\n          <DropdownMenu>\n            {Object.entries(contracts).map(([key, value]) => (\n              <DropdownItem key={key} value={key}>\n                {contractMetadata[key] ? \n                    contractMetadata[key].contractInterface + \" - \" + key\n                    : key}\n              </DropdownItem>\n            ))}\n            <DropdownItem divider />\n            <DropdownItem key=\"add\" value=\"add\">\n              Add ERC20 Contract\n            </DropdownItem>\n            <DropdownItem key=\"add2\" value=\"add2\">\n              Add Crowdsale Contract\n            </DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n      </Row>\n      {displayed}\n    </Container>\n  )\n}\n\nexport default TokenFactory\n","import React, { Component } from \"react\"\nimport { Drizzle } from \"@drizzle/store\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\n\nimport \"./App.css\"\n\nimport drizzle from \"./store\"\n// import MyContainer from \"./MyContainer\";\nimport TokenFactory from \"./TokenFactory\"\n\nclass App extends Component {\n  render() {\n    return (\n      <DrizzleContext.Provider drizzle={drizzle}>\n        <TokenFactory />\n      </DrizzleContext.Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./bootstrap.min.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
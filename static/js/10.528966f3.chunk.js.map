{"version":3,"sources":["components/WatchTokenButton/index.js","components/ERC20/ERC20Display/index.js","components/Crowdsale/CrowdsaleDisplay/index.js","views/Contracts/ContractCard/index.js","views/Contracts/MyContracts/index.js"],"names":["WatchTokenButton","web3","web3Contract","watchToken","e","a","provider","currentProvider","tokenAddress","address","methods","symbol","call","tokenSymbol","decimals","tokenDecimals","params","JSON","parse","stringify","type","options","image","console","log","sendAsync","method","id","Math","round","random","err","added","Button","onClick","ContractData","newContextComponents","ERC20Display","ContractForm","contract","drizzleContext","useContext","DrizzleContext","Context","drizzle","drizzleState","accounts","metadata","contracts","contractMetadata","contractInterface","totalSupply","render","data","balance","methodArgs","Row","Col","ListGroup","ListGroupItem","className","Badge","pill","CrowdsaleDisplay","useState","crowdsaleWalletKey","setCrowdsaleWalletKey","crowdsaleTokenKey","setCrowdsaleTokenKey","crowdsaleRateKey","setCrowdsaleRateKey","wallet","cacheCall","token","rate","crowdsaleWallet","crowdsaleToken","crowdsaleRate","value","ContractCard","deleteContract","contractKey","contractInfo","Card","CardHeader","CardBody","MyContracts","initialized","xs","sm","Object","entries","map","key"],"mappings":"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","file":"static/js/10.528966f3.chunk.js","sourcesContent":["import React from \"react\"\nimport { Button } from \"reactstrap\"\n\nconst WatchTokenButton = ({ web3, web3Contract }) => {\n  const watchToken = async e => {\n    const provider = web3.currentProvider\n    const tokenAddress = web3Contract.address\n    const tokenSymbol = await web3Contract.methods.symbol().call()\n    const tokenDecimals = await web3Contract.methods.decimals().call()\n\n    // const tokenImage = null;\n    const params = JSON.parse(\n      JSON.stringify({\n        type: \"ERC20\",\n        options: {\n          address: tokenAddress,\n          symbol: tokenSymbol,\n          decimals: tokenDecimals,\n          image:\n            \"https://cdn.pixabay.com/photo/2018/02/02/13/51/bitcoin-3125488_1280.png\"\n        }\n      })\n    )\n    console.log(params)\n\n    provider.sendAsync(\n      {\n        method: \"metamask_watchAsset\",\n        params,\n        id: Math.round(Math.random() * 100000)\n      },\n      (err, added) => {\n        console.log(\"provider returned\", err, added)\n        if (err || \"error\" in added) {\n        }\n      }\n    )\n  }\n\n  return <Button onClick={watchToken}>Watch in Wallet</Button>\n}\n\nexport default WatchTokenButton\n","import React, { useContext } from \"react\"\n\nimport { Row, Col, ListGroup, ListGroupItem, Badge } from \"reactstrap\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\nimport WatchTokenButton from \"../../WatchTokenButton\"\n\nconst { ContractData, ContractForm } = newContextComponents\n\nconst ERC20Display = ({ contract }) => {\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return null\n  }\n\n  const { accounts, contracts, contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface != \"ERC20\") {\n      return null\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return null\n  }\n\n  const totalSupply = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"totalSupply\"\n      render={data => data * 10e-18}\n    />\n  )\n\n  const symbol = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"symbol\"\n    />\n  )\n\n  const balance = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"balanceOf\"\n      methodArgs={[accounts[0]]}\n      render={data => data * 10e-18}\n    />\n  )\n\n  return (\n    <Row>\n      <Col>\n        <ListGroup>\n          <ListGroupItem className=\"justify-content-between\">\n            Total Supply\n            <Badge pill>\n              {totalSupply} {symbol}\n            </Badge>\n          </ListGroupItem>\n\n          <ListGroupItem className=\"justify-content-between\">\n            Balance\n            <Badge pill>\n              {balance} {symbol}\n            </Badge>\n          </ListGroupItem>\n        </ListGroup>\n        <WatchTokenButton web3={drizzle.web3} web3Contract={web3Contract} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ERC20Display\n","import React, { useState, useContext } from \"react\"\n\nimport { Row, Col, ListGroup, ListGroupItem, Badge } from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\n\nconst { ContractData } = newContextComponents\n\nconst CrowdsaleDisplay = ({ contract }) => {\n  const [crowdsaleWalletKey, setCrowdsaleWalletKey] = useState()\n  const [crowdsaleTokenKey, setCrowdsaleTokenKey] = useState()\n  const [crowdsaleRateKey, setCrowdsaleRateKey] = useState()\n\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return null\n  }\n\n  const { contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface != \"Crowdsale\") {\n      return null\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return null\n  }\n\n  if (!crowdsaleWalletKey) {\n    setCrowdsaleWalletKey(\n      drizzle.contracts[contract].methods.wallet.cacheCall()\n    )\n  }\n  if (!crowdsaleTokenKey) {\n    setCrowdsaleTokenKey(drizzle.contracts[contract].methods.token.cacheCall())\n  }\n  if (!crowdsaleRateKey) {\n    setCrowdsaleRateKey(drizzle.contracts[contract].methods.rate.cacheCall())\n  }\n\n  const crowdsaleWallet =\n    drizzleState.contracts[contract].wallet[crowdsaleWalletKey]\n  const crowdsaleToken =\n    drizzleState.contracts[contract].token[crowdsaleTokenKey]\n  const crowdsaleRate = drizzleState.contracts[contract].rate[crowdsaleRateKey]\n\n  if (!crowdsaleWallet || !crowdsaleToken || !crowdsaleRate) {\n    return null\n  }\n\n  return (\n    <Row>\n      <Col>\n        <ListGroup>\n          <ListGroupItem className=\"justify-content-between\">\n            Price\n            <Badge pill>{crowdsaleRate.value}</Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Token\n            <Badge pill>{crowdsaleToken.value}</Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Tokens on sale\n            <Badge pill>\n              <ContractData\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                contract={crowdsaleToken.value}\n                method=\"balanceOf\"\n                methodArgs={[crowdsaleWallet.value]}\n                render={data => data * 10e-18}\n              />\n            </Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Tokens stored at\n            <Badge pill>{crowdsaleWallet.value}</Badge>\n          </ListGroupItem>\n        </ListGroup>\n      </Col>\n    </Row>\n  )\n}\n\nexport default CrowdsaleDisplay\n","import React, { useState, useContext } from \"react\"\n\nimport { Card, CardHeader, CardBody, Button } from \"reactstrap\"\n\nimport ERC20Display from \"../../../components/ERC20/ERC20Display\"\nimport CrowdsaleDisplay from \"../../../components/Crowdsale/CrowdsaleDisplay\"\n\nconst ContractCard = ({ deleteContract, contractKey, contract, metadata }) => {\n  let contractInterface\n  if (metadata) {\n    contractInterface = metadata.contractInterface\n  }\n\n  const handleDeleteContract = e => {\n    deleteContract(contractKey)\n  }\n\n  let contractInfo = <div />\n  if (contractInterface == \"ERC20\") {\n    contractInfo = <ERC20Display contract={contractKey} />\n  } else if (contractInterface == \"Crowdsale\") {\n    contractInfo = <CrowdsaleDisplay contract={contractKey} />\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <strong>{contractInterface || \"Unknown\"}</strong> {contractKey}\n      </CardHeader>\n      <CardBody>\n        {contractInfo}\n        <Button onClick={handleDeleteContract}>Delete</Button>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ContractCard\n","import React, { useState, useContext } from \"react\"\n\nimport {\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  Row,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport ContractCard from \"../ContractCard\"\n\nconst MyContracts = () => {\n  const drizzleContext = useContext(DrizzleContext.Context)\n  const { drizzle, drizzleState, initialized } = drizzleContext\n  if (!initialized) {\n    return \"Loading...\"\n  }\n  if (!drizzleState) {\n    return \"Invalid state...\"\n  }\n  const { contracts, contractMetadata } = drizzleState\n\n  const deleteContract = contractKey => {\n    drizzle.deleteContract(contractKey)\n  }\n\n  return (\n    <div className=\"animated fadeIn\">\n      <Row>\n        <Col xs=\"12\" sm=\"6\">\n          {Object.entries(contracts).map(([key, value]) => (\n            <ContractCard\n              key={key}\n              deleteContract={deleteContract}\n              contractKey={key}\n              contract={value}\n              metadata={contractMetadata[key]}\n            />\n          ))}\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default MyContracts\n"],"sourceRoot":""}
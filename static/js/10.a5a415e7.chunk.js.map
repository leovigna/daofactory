{"version":3,"sources":["components/WatchTokenButton/index.js","components/ERC20/ERC20Display/index.js","components/Crowdsale/CrowdsaleDisplay/index.js","views/Contracts/ContractCard/index.js","views/Contracts/MyContracts/index.js"],"names":["WatchTokenButton","web3","web3Contract","watchToken","a","provider","currentProvider","tokenAddress","address","methods","symbol","call","tokenSymbol","decimals","tokenDecimals","params","JSON","parse","stringify","type","options","image","console","log","sendAsync","method","id","Math","round","random","err","added","Button","onClick","ContractData","newContextComponents","ERC20Display","contract","drizzleContext","useContext","DrizzleContext","Context","drizzle","drizzleState","accounts","metadata","contractMetadata","contractInterface","contracts","tokenName","totalSupply","render","data","balance","methodArgs","Row","Col","ListGroup","ListGroupItem","className","Badge","pill","CrowdsaleDisplay","useState","crowdsaleWalletKey","setCrowdsaleWalletKey","crowdsaleTokenKey","setCrowdsaleTokenKey","crowdsaleRateKey","setCrowdsaleRateKey","wallet","cacheCall","token","rate","crowdsaleWallet","crowdsaleRate","crowdsaleToken","value","walletBalance","ContractCard","props","contractKey","contractInfo","Card","CardHeader","CardBody","MyContracts","initialized","deleteContract","xs","sm","Object","entries","map","key"],"mappings":"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","file":"static/js/10.a5a415e7.chunk.js","sourcesContent":["import React from \"react\"\nimport { Button } from \"reactstrap\"\n\nconst WatchTokenButton = ({ web3, web3Contract }) => {\n  const watchToken = async () => {\n    const provider = web3.currentProvider\n    const tokenAddress = web3Contract.address\n    const tokenSymbol = await web3Contract.methods.symbol().call()\n    const tokenDecimals = await web3Contract.methods.decimals().call()\n\n    // const tokenImage = null;\n    const params = JSON.parse(\n      JSON.stringify({\n        type: \"ERC20\",\n        options: {\n          address: tokenAddress,\n          symbol: tokenSymbol,\n          decimals: tokenDecimals,\n          image:\n            \"https://cdn.pixabay.com/photo/2018/02/02/13/51/bitcoin-3125488_1280.png\"\n        }\n      })\n    )\n    console.log(params)\n\n    provider.sendAsync(\n      {\n        method: \"metamask_watchAsset\",\n        params,\n        id: Math.round(Math.random() * 100000)\n      },\n      (err, added) => {\n        console.log(\"provider returned\", err, added)\n      }\n    )\n  }\n\n  return <Button onClick={watchToken}>Add to Metamask</Button>\n}\n\nexport default WatchTokenButton\n","import React, { useContext } from \"react\"\n\nimport { Row, Col, ListGroup, ListGroupItem, Badge } from \"reactstrap\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\nimport WatchTokenButton from \"../../WatchTokenButton\"\n\nconst { ContractData } = newContextComponents\n\nconst ERC20Display = ({ contract }) => {\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return null\n  }\n\n  const { accounts, contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface !== \"ERC20\") {\n      return null\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return null\n  }\n\n  const tokenName = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"name\"\n    />\n  )\n\n  const tokenSymbol = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"symbol\"\n    />\n  )\n\n  const totalSupply = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"totalSupply\"\n      render={data => data * 10e-18}\n    />\n  )\n\n  const balance = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={contract}\n      method=\"balanceOf\"\n      methodArgs={[accounts[0]]}\n      render={data => data * 10e-18}\n    />\n  )\n\n  return (\n    <Row>\n      <Col>\n        <ListGroup>\n          <ListGroupItem className=\"justify-content-between\">\n            Token\n            <Badge pill>\n              {tokenName} ({tokenSymbol})\n            </Badge>\n          </ListGroupItem>\n\n          <ListGroupItem className=\"justify-content-between\">\n            Total Supply\n            <Badge pill>\n              {totalSupply} {tokenSymbol}\n            </Badge>\n          </ListGroupItem>\n\n          <ListGroupItem className=\"justify-content-between\">\n            My Balance\n            <Badge pill>\n              {balance} {tokenSymbol}\n            </Badge>\n          </ListGroupItem>\n        </ListGroup>\n        <WatchTokenButton web3={drizzle.web3} web3Contract={web3Contract} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ERC20Display\n","import React, { useState, useContext } from \"react\"\n\nimport { Row, Col, ListGroup, ListGroupItem, Badge } from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\n\nconst { ContractData } = newContextComponents\n\nconst CrowdsaleDisplay = ({ contract }) => {\n  const [crowdsaleWalletKey, setCrowdsaleWalletKey] = useState()\n  const [crowdsaleTokenKey, setCrowdsaleTokenKey] = useState()\n  const [crowdsaleRateKey, setCrowdsaleRateKey] = useState()\n\n  const drizzleContext = useContext(DrizzleContext.Context)\n\n  const { drizzle, drizzleState } = drizzleContext\n  if (!drizzleState) {\n    return null\n  }\n\n  const { contractMetadata } = drizzleState\n  const metadata = contractMetadata[contract]\n  if (metadata) {\n    const { contractInterface } = metadata\n    if (contractInterface !== \"Crowdsale\") {\n      return null\n    }\n  }\n\n  const web3Contract = drizzle.contracts[contract]\n  if (!web3Contract) {\n    return null\n  }\n\n  if (!crowdsaleWalletKey) {\n    setCrowdsaleWalletKey(\n      drizzle.contracts[contract].methods.wallet.cacheCall()\n    )\n  }\n  if (!crowdsaleTokenKey) {\n    setCrowdsaleTokenKey(drizzle.contracts[contract].methods.token.cacheCall())\n  }\n  if (!crowdsaleRateKey) {\n    setCrowdsaleRateKey(drizzle.contracts[contract].methods.rate.cacheCall())\n  }\n\n  const crowdsaleWallet =\n    drizzleState.contracts[contract].wallet[crowdsaleWalletKey]\n  const crowdsaleRate = drizzleState.contracts[contract].rate[crowdsaleRateKey]\n  const crowdsaleToken =\n    drizzleState.contracts[contract].token[crowdsaleTokenKey]\n\n  if (!crowdsaleWallet || !crowdsaleToken || !crowdsaleRate) {\n    return null\n  }\n\n  const tokenName = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={crowdsaleToken.value}\n      method=\"name\"\n    />\n  )\n\n  const tokenSymbol = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={crowdsaleToken.value}\n      method=\"symbol\"\n    />\n  )\n\n  const totalSupply = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={crowdsaleToken.value}\n      method=\"totalSupply\"\n      render={data => data * 10e-18}\n    />\n  )\n\n  const walletBalance = (\n    <ContractData\n      drizzle={drizzle}\n      drizzleState={drizzleState}\n      contract={crowdsaleToken.value}\n      method=\"balanceOf\"\n      methodArgs={[crowdsaleWallet.value]}\n      render={data => data * 10e-18}\n    />\n  )\n\n  return (\n    <Row>\n      <Col>\n        <ListGroup>\n          <ListGroupItem className=\"justify-content-between\">\n            Token\n            <Badge pill>\n              {\" \"}\n              {tokenName} {tokenSymbol}{\" \"}\n            </Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Price\n            <Badge pill>\n              1 wei = {crowdsaleRate.value} {tokenSymbol}\n            </Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Token at\n            <Badge pill>{crowdsaleToken.value}</Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            TokenSale supply\n            <Badge pill>\n              {walletBalance} {tokenSymbol}\n            </Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Total supply\n            <Badge pill>\n              {totalSupply} {tokenSymbol}\n            </Badge>\n          </ListGroupItem>\n          <ListGroupItem className=\"justify-content-between\">\n            Tokens stored at\n            <Badge pill>{crowdsaleWallet.value}</Badge>\n          </ListGroupItem>\n        </ListGroup>\n      </Col>\n    </Row>\n  )\n}\n\nexport default CrowdsaleDisplay\n","// @flow\nimport React from \"react\"\n\nimport { Card, CardHeader, CardBody } from \"reactstrap\"\n\nimport ERC20Display from \"../../../components/ERC20/ERC20Display\"\nimport CrowdsaleDisplay from \"../../../components/Crowdsale/CrowdsaleDisplay\"\n\ntype Props = {\n  contractKey: string,\n  metadata: {\n    contractInterface: string\n  }\n}\n\nconst ContractCard = (props: Props) => {\n  const { contractKey, metadata } = props\n  let contractInterface\n  if (metadata) {\n    contractInterface = metadata.contractInterface\n  }\n\n  /*\n  const handleDeleteContract = e => {\n    deleteContract(contractKey)\n  }\n  */\n\n  let contractInfo = <div />\n  if (contractInterface === \"ERC20\") {\n    contractInfo = <ERC20Display contract={contractKey} />\n  } else if (contractInterface === \"Crowdsale\") {\n    contractInfo = <CrowdsaleDisplay contract={contractKey} />\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <strong>{contractInterface || \"Unknown\"}</strong> {contractKey}\n      </CardHeader>\n      <CardBody>\n        {contractInfo}\n        {/* <Button onClick={handleDeleteContract}>Delete</Button> */}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ContractCard\n","import React, { useState, useContext } from \"react\"\n\nimport {\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  Row,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from \"reactstrap\"\n\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport ContractCard from \"../ContractCard\"\n\nconst MyContracts = () => {\n  const drizzleContext = useContext(DrizzleContext.Context)\n  const { drizzle, drizzleState, initialized } = drizzleContext\n  if (!initialized) {\n    return \"Loading...\"\n  }\n  if (!drizzleState) {\n    return \"Invalid state...\"\n  }\n  const { contracts, contractMetadata } = drizzleState\n\n  const deleteContract = contractKey => {\n    drizzle.deleteContract(contractKey)\n  }\n\n  return (\n    <div className=\"animated fadeIn\">\n      <Row>\n        <Col xs=\"12\" sm=\"6\">\n          {Object.entries(contracts).map(([key, value]) => (\n            <ContractCard\n              key={key}\n              deleteContract={deleteContract}\n              contractKey={key}\n              contract={value}\n              metadata={contractMetadata[key]}\n            />\n          ))}\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default MyContracts\n"],"sourceRoot":""}